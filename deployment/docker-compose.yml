version: '2'
services:


  elasticsearch:
    image: elasticsearch
    network_mode: "bridge"

  rabbitmq:
    image: rabbitmq
    network_mode: "bridge"

  postgis:
    image: kartoza/postgis:9.4-2.1
    volumes:
      - './pg/postgres_data:/var/lib/postgresql'
    environment:
      - POSTGRES_USER=docker
      - POSTGRES_PASS=docker
    network_mode: "bridge"

  qgis-server:
    image: kartoza/qgis-server:LTR
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
      - '../src/otf-project:/opt/qgis-server/plugins/otf-project'
      - './qgis-web:/var/www'
      - './qgis-server-log:/tmp/qgis-server'
    environment:
      - DEBUG=False
      - QGIS_LOG_FILE=/tmp/qgis-server/qgis.log
      - QGIS_SERVER_LOG_FILE=/tmp/qgis-server/qgis-server.log
      - QGIS_DEBUG=5
      - QGIS_SERVER_LOG_LEVEL=5
      - QGIS_PLUGINPATH=/opt/qgis-server/plugins/
      # It is important to include this environment variable
      # QGIS-Server:LTR cgi needs it
      - QGIS_PROJECT_FILE=
    links:
      - postgis
    network_mode: "bridge"

  django:
    build: docker-geonode
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
      - '../src/otf-project:/opt/qgis-server/plugins'
      - '../src/geonode/geonode/static_root:/home/web/static'
      - '../src/geonode/geonode/uploaded:/home/web/media'
      - './logs:/var/log/'
    command: uwsgi --ini /uwsgi.conf
    environment:
      - DATABASE_URL=postgres://docker:docker@postgis:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - DJANGO_SETTINGS_MODULE=geonode.settings
      - GEOSERVER_BASE_URL="http://geoserver:8080/geoserver/"
# Should be specified in docker-compose.override.yml. Because it depends on the
# host
#      - ALLOWED_HOSTS=['django',]
      - DEBUG=False
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
      - SITEURL=http://localhost/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
    links:
      - postgis
      - elasticsearch
      - rabbitmq
      - inasafe-output
      - qgis-server
    network_mode: "bridge"

  nginx:
    build: docker-nginx
    links:
      - django
      - qgis-server
#  Default exposed port.
#  Should be specified in docker-compose.override.yml
#    ports:
#      - "80:80"
    network_mode: "bridge"

  web:
    image: nginx
    volumes:
      - './sites-enabled:/etc/nginx/conf.d:ro'
      # I dont use volumes_from as I want to use the ro modifier
      - '../src/geonode/geonode/static_root:/home/web/static:ro'
      - '../src/geonode/geonode/uploaded:/home/web/media:ro'
      - './logs:/var/log/nginx'
    links:
      - django
      - qgis-server
    network_mode: "bridge"

  celery:
    build: docker-geonode
    working_dir: /usr/src/app
    volumes:
      - '../src/geonode:/usr/src/app'
      - '../src/core:/usr/src/core'
      - '../src/geosafe:/usr/src/geosafe'
    environment:
      - DEBUG=False
      - C_FORCE_ROOT=True
      - DATABASE_URL=postgres://docker:docker@postgis:5432/gis
      - BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - PYTHONPATH=/usr/src:/usr/src/app/
      - DJANGO_SETTINGS_MODULE=core.settings
      - ROOT_URLCONF=core.urls
      - SITEURL=http://localhost/
      - GEONODE_BASE_URL=http://nginx/
      - QGIS_SERVER_URL=http://qgis-server/
    command: celery -A geosafe worker -l debug -Q default,cleanup,email,update,geosafe -n geonode.%h -B
    links:
      - rabbitmq
      - postgis
      - elasticsearch
      - inasafe-output
      - qgis-server
    network_mode: "bridge"

  inasafe-output:
    image: nginx
    volumes:
      - ./inasafe/headless/output:/usr/share/nginx/html/output
    ports:
      - "8081:80"
    network_mode: "bridge"

  inasafe-headless:
    build: docker-inasafe-headless
    volumes:
      - '../src/inasafe:/home/src/inasafe'
      - './inasafe/headless/output:/home/output'
    working_dir: /home/src/inasafe
    environment:
      - C_FORCE_ROOT=True
      - PYTHONPATH=/home/src/inasafe
      - DISPLAY=:99
      - INASAFE_HEADLESS_BROKER_HOST=amqp://guest:guest@rabbitmq:5672/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_DIR=/home/output/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_URL=http://inasafe-output/output/
    command: /start-celery.sh prod inasafe-headless
    links:
      - rabbitmq:rabbitmq
      - nginx:nginx
    network_mode: "bridge"

  inasafe-headless-analysis:
    build: docker-inasafe-headless
    volumes:
      - '../src/inasafe:/home/src/inasafe'
      - './inasafe/headless/output:/home/output'
    working_dir: /home/src/inasafe
    environment:
      - C_FORCE_ROOT=True
      - PYTHONPATH=/home/src/inasafe
      - DISPLAY=:99
      - INASAFE_HEADLESS_BROKER_HOST=amqp://guest:guest@rabbitmq:5672/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_DIR=/home/output/
      - INASAFE_HEADLESS_DEPLOY_OUTPUT_URL=http://inasafe-output/output/
    command: /start-celery.sh prod inasafe-headless-analysis
    links:
      - rabbitmq:rabbitmq
      - nginx:nginx
    network_mode: "bridge"
